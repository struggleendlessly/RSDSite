@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using web.Data
@using shared
@using web.Interfaces

@attribute [Route(StaticRoutesStrings.LoginPageRoute)]

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ISiteNameSetter SiteNameSetter; 
<PageTitle>Log in</PageTitle>

<!-- ========== MAIN CONTENT ========== -->
<main id="content" role="main">
    <!-- Form -->
    <div class="container content-space-3 content-space-t-lg-4 content-space-b-lg-3">
        <div class="flex-grow-1 mx-auto" style="max-width: 28rem;">
            <!-- Heading -->
            <div class="text-center mb-5 mb-md-7">
                <h1 class="h2">Welcome back</h1>
                <p>Login to manage your account.</p>
            </div>
            <!-- End Heading -->
            <!-- Form -->
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <!-- Form -->
                <div class="mb-4">
                    <label class="form-label" for="signupSimpleLoginEmail">Your email</label>
                    <InputText @bind-Value="Input.Email" type="email" class="form-control form-control-lg" id="signupSimpleLoginEmail" placeholder="email@site.com" aria-label="email@site.com" required />
                    <ValidationMessage For="() => Input.Email" class="invalid-feedback" />
                </div>
                <!-- End Form -->
                <!-- Form -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <label class="form-label" for="signupSimpleLoginPassword">Password</label>

                        <a class="form-label-link" href="@(StaticRoutesStrings.ForgotPasswordPageRoute)">Forgot Password?</a>
                    </div>

                    <InputText @bind-Value="Input.Password" type="password" class="form-control form-control-lg" id="signupSimpleLoginPassword" placeholder="**********" aria-label="**********" required />

                    <ValidationMessage For="() => Input.Password" class="invalid-feedback" />
                </div>
                <!-- End Form -->

                <!-- Checkbox -->
                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" type="checkbox" id="signupSimpleLoginRememberMe" class="form-check-input" />
                    <label class="form-check-label" for="signupSimpleLoginRememberMe">Remember me</label>
                </div>
                <!-- End Checkbox -->

                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-primary btn-lg">Log in</button>
                </div>

                <div class="text-center">
                    <p>Don't have an account yet? <a class="link" href="@(NavigationManager.GetUriWithQueryParameters(StaticRoutesStrings.RegisterPageRoute, new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Sign up here</a></p>
                </div>
            </EditForm>
            <!-- End Form -->
        </div>
    </div>
    <!-- End Form -->
</main>
<!-- ========== END MAIN CONTENT ========== -->

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            await SiteNameSetter.SetUserSiteName(Input.Email);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
