@using shared
@using shared.Managers
@using shared.Interfaces
@using web.Components.Pages

@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        @if (!EditMode)
        {
            <button class="badge bg-primary" @onclick="ToggleEditModeAsync">Edit</button>
        }
        else
        {
            <button class="badge bg-success" @onclick="SaveChangesAsync">Save</button>
            <button class="badge bg-secondary" @onclick="CancelEditAsync">Cancel</button>
        } 
    </Authorized>
</AuthorizeView>
@ChildContent
<AuthorizeView>
    <Authorized>
        <textarea id="@(TinyMceId)" class="d-none">@(Value)</textarea>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string TinyMceId { get; set; } = string.Empty;

    [Parameter]
    public ITinyMceEditable Parent { get; set; }

    [Parameter]
    public string Key { get; set; } = string.Empty;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool EditMode { get; set; } = false;

    private string Value { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Value = Parent.Model.Data[Key];
    }

    private async Task ToggleEditModeAsync()
    {
        EditMode = !EditMode;

        if (EditMode)
        {
            await InitializeTinyMCEAsync();
        }
        else
        {
            await DestroyTinyMCEAsync();
        }
    }

    private async Task InitializeTinyMCEAsync()
    {
        await JSRuntime.InvokeVoidAsync(JSInvokeMethodList.tinymceActivate, TinyMceId);
    }

    private async Task DestroyTinyMCEAsync()
    {
        await JSRuntime.InvokeVoidAsync(JSInvokeMethodList.tinymceDestroy, TinyMceId);
    }

    private async Task SaveChangesAsync()
    {
        var content = await JSRuntime.InvokeAsync<string>(JSInvokeMethodList.tinymceGetContent, TinyMceId);

        Parent.Model.Data[Key] = content;
        Parent.Save();

        await ToggleEditModeAsync();
    }

    private async Task CancelEditAsync()
    {
        await ToggleEditModeAsync();
    }
}
