// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shared.Data;

#nullable disable

namespace shared.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240815154412_RemoveIdentityTables")]
    partial class RemoveIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserWebsite", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebsitesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsersId", "WebsitesId");

                    b.HasIndex("WebsitesId");

                    b.ToTable("UserWebsite");
                });

            modelBuilder.Entity("shared.Data.Entities.ContactUsMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WebsiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ContactUsMessages");
                });

            modelBuilder.Entity("shared.Data.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriptionModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebsiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionModuleId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("shared.Data.Entities.SubscriptionModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StripeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StripeId");

                    b.ToTable("SubscriptionModules");
                });

            modelBuilder.Entity("shared.Data.Entities.SubscriptionStripeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionStripeInfos");
                });

            modelBuilder.Entity("shared.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FacebookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GoogleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MicrosoftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("shared.Data.Entities.Website", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNewDomainInProcess")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("UserWebsite", b =>
                {
                    b.HasOne("shared.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shared.Data.Entities.Website", null)
                        .WithMany()
                        .HasForeignKey("WebsitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shared.Data.Entities.ContactUsMessage", b =>
                {
                    b.HasOne("shared.Data.Entities.Website", "Website")
                        .WithMany("ContactUsMessages")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("shared.Data.Entities.Subscription", b =>
                {
                    b.HasOne("shared.Data.Entities.SubscriptionModule", "SubscriptionModule")
                        .WithMany("Subscription")
                        .HasForeignKey("SubscriptionModuleId");

                    b.HasOne("shared.Data.Entities.Website", "Website")
                        .WithMany("Subscriptions")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionModule");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("shared.Data.Entities.SubscriptionModule", b =>
                {
                    b.HasOne("shared.Data.Entities.SubscriptionStripeInfo", "Stripe")
                        .WithMany("SubscriptionModules")
                        .HasForeignKey("StripeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stripe");
                });

            modelBuilder.Entity("shared.Data.Entities.SubscriptionModule", b =>
                {
                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("shared.Data.Entities.SubscriptionStripeInfo", b =>
                {
                    b.Navigation("SubscriptionModules");
                });

            modelBuilder.Entity("shared.Data.Entities.Website", b =>
                {
                    b.Navigation("ContactUsMessages");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
