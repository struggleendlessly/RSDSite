@using shared.Enums
﻿@using shared.Helpers

@if (Model.Data is not null && Model.Data.Count > 0 && ModelUrls.Data is not null && ModelUrls.Data.Count > 0 && SettingsModel.Data is not null && LocalizationModel.Data is not null)
{
    <div class="row row-cols-1 row-cols-md-3 g-5 py-5 mx-auto mt-1">

        @foreach (var item in ServiceItems)
        {
            var serviceKey = item.ShortDesc.FirstOrDefault().Key;
            var serviceUrlKey = serviceKey + StaticStrings.UrlKeyEnding;
            var serviceTitleKey = serviceKey + StaticStrings.TitleKeyEnding;
            var serviceSubtitleKey = serviceKey + StaticStrings.SubtitleKeyEnding;
            var serviceUrlValue = ModelUrls.Data[serviceUrlKey];
            var serviceButtonTextValue = SettingsModel.Data[StaticStrings.AdminPageDataServicesButtonTextKey];

            <AuthorizeView>
                <Authorized>
                    <div class="col mx-auto text-center mt-0 mb-3 mb-lg-5" style="">
                        <div class="card border-light bg-light h-100 py-3">

                            <!-- Card add or remove -->
                            @if (StateManager.CanEditSite())
                            {
                                <div class="mt-2">
                                    <VisibilityEditor EditorId="@(StaticStrings.VisibilityEditor_ServicesList_Id + serviceKey)"
                                                      Model="Model"
                                                      FuncSave="SaveContent"
                                                      Key="@serviceKey">
                                    </VisibilityEditor>
                                </div>
                                <div class="mb-2">
                                    <button type="button" class="btn btn-outline-success" @onclick="() => Add(serviceKey)" disabled="@isAdding">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"></path>
                                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"></path>
                                        </svg>
                                    </button>

                                    <button type="button" class="btn btn-outline-danger" @onclick="() => Remove(serviceKey)" disabled="@isAdding">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-circle" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"></path>
                                            <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8"></path>
                                        </svg>
                                    </button>

                                    @if (PopoversModel is not null && PopoversModel.Data is not null && !string.IsNullOrWhiteSpace(PopoverKey))
                                    {
                                        <Popover PopoversModel="PopoversModel"
                                                 PopoverKey="@PopoverKey">
                                        </Popover>
                                    }
                                </div>
                            }

                            <!-- Card add or remove -->
                            @if (StateManager.CanEditSite())
                            {
                                <div class="card-header bg-transparent border-dark">
                                    <TextEditor EditorId="@(StaticHtmlStrings.HTMLEditorServicesListServiceUrlId + serviceKey)"
                                                EditorType="@(StaticStrings.TextEditorTypeText)"
                                                Model="ModelUrls"
                                                FuncSave="SaveUrl"
                                                Key="@serviceUrlKey">
                                        <p class="@StaticHtmlStrings.CSSMainSubTitle_p fw-bold">
                                            @LocalizationModel.Data[StaticStrings.Localization_Items_Item_Link_Key]:
                                        </p>
                                        <span class="@StaticHtmlStrings.CSSMainSubTitle_p">
                                            @ModelUrls.Data[serviceUrlKey]
                                        </span>
                                    </TextEditor>
                                </div>
                            }

                            <div class="card-body">
                                <!-- Card main title -->
                                <HTMLEditor EditorId="@(StaticHtmlStrings.HTMLEditorServicesListServiceTitleId + serviceKey)"
                                            EditorContentFormat="@(StaticStrings.EditorContentFormatText)"
                                            Model="Model"
                                            FuncSave="SaveContent"
                                            Key="@serviceTitleKey">
                                    <h5 class="card-title">
                                        @((MarkupString)Model.Data[serviceTitleKey])
                                    </h5>
                                </HTMLEditor>

                                <!-- Card text -->
                                <HTMLEditor EditorId="@(StaticHtmlStrings.HTMLEditorServicesListServiceSubtitleId + serviceKey)"
                                            EditorContentFormat="@(StaticStrings.EditorContentFormatHtml)"
                                            Model="Model"
                                            FuncSave="SaveContent"
                                            Key="@serviceSubtitleKey">
                                    <p class="card-text">
                                        @((MarkupString)Model.Data[serviceSubtitleKey])
                                    </p>
                                </HTMLEditor>

                            </div>

                            <!-- Card footer -->
                            <div class="card-footer bg-light border-0">
                                @{
                                    var url = string.Empty;
                                    if (PageType == ServicesPageType.Services)
                                    {
                                        url = StateManager.GetPageUrl($"{StaticRoutesStrings.ItemsPageUrl}/{serviceUrlValue}");
                                    }
                                    else if (PageType == ServicesPageType.Portfolio)
                                    {
                                        url = StateManager.GetPageUrl($"{StaticRoutesStrings.PortfolioPageUrl}/{serviceUrlValue}");
                                    }
                                    else if (PageType == ServicesPageType.Documents)
                                    {
                                        url = StateManager.GetPageUrl($"{StaticRoutesStrings.DocumentsPageUrl}/{serviceUrlValue}");
                                    }
                                }
                                <a class="@StaticHtmlStrings.CSSButtonDarkInTheText" href="@url">
                                    @((MarkupString)serviceButtonTextValue)
                                </a>
                            </div>

                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    @if (VisibilityHelpers.IsVisible(Model.Data, serviceKey))
                    {
                        <div class="col mx-auto text-center mt-0 mb-3 mb-lg-5" style="">
                            <div class="card border-light bg-light h-100 py-3">
                                <div class="card-body">

                                    <!-- Card main title -->
                                    <HTMLEditor EditorId="@(StaticHtmlStrings.HTMLEditorServicesListServiceTitleId + serviceKey)"
                                                EditorContentFormat="@(StaticStrings.EditorContentFormatText)"
                                                Model="Model"
                                                FuncSave="SaveContent"
                                                Key="@serviceTitleKey">
                                        <h5 class="card-title">
                                            @((MarkupString)Model.Data[serviceTitleKey])
                                        </h5>
                                    </HTMLEditor>

                                    <!-- Card text -->
                                    <HTMLEditor EditorId="@(StaticHtmlStrings.HTMLEditorServicesListServiceSubtitleId + serviceKey)"
                                                EditorContentFormat="@(StaticStrings.EditorContentFormatHtml)"
                                                Model="Model"
                                                FuncSave="SaveContent"
                                                Key="@serviceSubtitleKey">
                                        <p class="card-text">
                                            @((MarkupString)Model.Data[serviceSubtitleKey])
                                        </p>
                                    </HTMLEditor>

                                </div>

                                <!-- Card footer -->
                                <div class="card-footer bg-light border-0">
                                    @{
                                        var url = string.Empty;
                                        if (PageType == ServicesPageType.Services)
                                        {
                                            url = StateManager.GetPageUrl($"{StaticRoutesStrings.ItemsPageUrl}/{serviceUrlValue}");
                                        }
                                        else if (PageType == ServicesPageType.Portfolio)
                                        {
                                            url = StateManager.GetPageUrl($"{StaticRoutesStrings.PortfolioPageUrl}/{serviceUrlValue}");
                                        }
                                        else if (PageType == ServicesPageType.Documents)
                                        {
                                            url = StateManager.GetPageUrl($"{StaticRoutesStrings.DocumentsPageUrl}/{serviceUrlValue}");
                                        }
                                    }
                                    <a class="@StaticHtmlStrings.CSSButtonDarkInTheText" href="@url">
                                        @((MarkupString)serviceButtonTextValue)
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </NotAuthorized>
            </AuthorizeView>
        }
    </div>
}
else
{
    <AuthorizeView>
        <Authorized>
            <!-- Card add -->
            @if (StateManager.CanEditSite())
            {
                <div class="mb-2 mt-2">
                    <button type="button" class="btn btn-outline-success" @onclick="() => Add()" disabled="@isAdding">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"></path>
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"></path>
                        </svg>
                    </button>
                </div>
            }
        </Authorized>
    </AuthorizeView>
}
